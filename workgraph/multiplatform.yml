stop-bbb:
    title: "Turn off and decommission the Buildbot Bridge"
    dependencies:
        - stop-bb-build-masters
        - stop-bb-test-masters

stop-bb-schedulers:
    # NOTE: by this time, the schedulers should not be creating any build requests (everything
    # should already be disabled)
    title: "Shut off BB Schedulers (except one for ESR et al.)"
    dependencies:
        - fuzzing
        - seta-in-tree
        - periodic-update-service
        - windows-opt-tier1
        - linux32-opt-tier1
        - linux64-opt-tier1
        - macosx-all-tier1
        - stop-bb-build-masters

stop-bb-test-masters:
    title: "Turn off the Test Buildmasters (except one of each for ESR et al.)"
    dependencies:
        - stop-bb-macosx-test-masters
        - stop-bb-linux-test-masters
        - stop-bb-windows-test-masters

stop-bb-build-masters:
    title: "Turn off the Build Buildmasters (except one of each for ESR et al.)"
    dependencies:
        - stop-releasetasks-via-bbb
        - macosx-disable-bb-builds
        - linux32-disable-bb-builds
        - linux64-disable-bb-builds
        - windows-disable-bb-builds
        - android-disable-bb-builds

seta-in-tree:
    title: "SETA support in tree"
    description: in-tree taskgraph generation correctly skips low-value tests
    bug: 1287018
    done: true
    assigned: MikeLing

in-tree-bbb-support:
    title: "Support for invoking BB jobs from decision tasks via BBB"
    bug: 1316077
    description: |
        This involves building in-tree infrastructure to create the proper
        payload for BBB to run test tasks against builds made in TaskCluster.
        Likely the hardest part is generating the BuilderName correctly.
    assigned: wcosta

beetmover-worker-impl:
    # "beetworker"?
    title: "Implement and deploy a Beetmoover Worker based on scriptworker"
    bug: 1282188
    done: true
    assigned: mtabara

balrog-worker-impl:
    title: "Implement and deploy a balorg worker based on scriptworker"
    bug: 1277871
    done: true
    assigned: mtabara

automatic-retry-android-jobs:
    title: "Automatically retry Android jobs with specific kinds of failures"
    dependencies:
        - docker-worker-retry-on

docker-worker-retry-on:
    title: "Support automatically retrying on some failures in docker-worker"
    done: true

nightly-beetmover-tier2:
    title: "beetmover tasks implemented in-tree for tier2 platforms"
    assigned: kmoir
    done: true
    dependencies:
        - beetmover-worker-impl

nightly-single-locale-beetmover-tier2:
    title: "beetmover tasks for single-locale builds"
    description: |
        Implement tasks for beetmover that can handle the additional complexity of
        artifact names containing locale names.
    assigned: kmoir
    done: true
    dependencies:
        - beetmover-worker-impl

stop-bb-linux-test-masters:
    title: "Turn off the Linux Test Buildmasters (except one for ESR et al.)"
    dependencies:
        - linux64-talos-on-hardware-100pct
        # android tests use the linux test masters
        - android-opt-tier1

docker-worker-cot-gpg-keys-in-repo:
    title: "Set up a process for generating and adding keys to the cot gpg repo for every docker-worker deployment (reimage or AMI generation)"
    assigned: garndt
    done: true

generic-worker-cot-gpg-keys-in-repo:
    title: "Set up a process for generating and adding keys to the cot gpg repo for every generic-worker deployment (reimage or AMI generation)"
    description: |
        The automation that creates AMIs based on OpenCloudConfig commits will create a pull request against the gpg repository with the new key,
        and block deploying the new AMI until that PR is signed and merged.

taskcluster-worker-cot-gpg-keys-in-repo:
    title: "Set up a process for generating and adding keys to the cot gpg repo for every taskcluster-worker deployment (reimage or AMI generation)"

scriptworker-chain-of-trust-verification:
    title: "Enable chain of trust verification, and block on it before scriptworker jobs"
    assigned: aki
    bug: 1309293
    done: true

beetmover-chain-of-trust:
    title: "Enable chain of trust verification in beetmover scriptworker script"
    bug: 1317747
    assigned: jlund

pushapk-chain-of-trust:
    title: "Enable chain of trust verification in pushapk scriptworker script"
    bug: 1317783

balrog-chain-of-trust:
    title: "Enable chain of trust verification in the balrog scriptworker script"
    bug: 1317800
    assigned: aki

docker-image-sha-doesnt-match:
    title: "add info for scriptworker to be able to verify built docker image SHA"
    bug:  1315415

scriptworker-queue-monitoring:
    title: "Monitor scriptworker queues and alert when too large"
    bug: 1314840
    assigned: sfraser

scriptworker-nagios:
    title: "Monitor scriptworker instances and alert on issues"
    bug: 1314840
    assigned: sfraser

scriptworker-iptables:
    title: "Block non-required scriptworker ports/traffic"
    bug: 1308980

scriptworker-ssh-alerts:
    title: "Alerts on ssh to scriptworker instances"
    bug: 1290261
    assigned: phrozyn

scriptworker-tier1:
    title: "Scriptworker is tier1-ready"
    bug: 1317789
    dependencies:
        - scriptworker-chain-of-trust-verification
        - beetmover-chain-of-trust
        - pushapk-chain-of-trust
        - balrog-chain-of-trust
        - scriptworker-queue-monitoring
        - scriptworker-nagios
        - scriptworker-ssh-alerts
        - scriptworker-iptables
        - docker-image-sha-doesnt-match

separate-make-check:
    title: "Run `make check` actions in a separate task from builds"
    bug: 992323

pulse-actions-backfill:
    title: "Add support for backfilling jobs"
    bug: 1289823
    assigned: bstack

pulse-actions-missing-talos:
    title: "Add support for backfilling all talos jobs on a push"
    bug: 1289824
    assigned: bstack

docker-generic-taskcluster-worker-priority-support:
    title: "Use queue.claimWork in {docker,generic,taskcluster}-worker, load test"
    assigned: jonasfj
    description: |
        Each of these three worker implementations needs to be updated to use
        the `queue.claimWork` operation, followed by a staged deployment to
        ensure that the queue service is not overwhelmed by the load.

script-worker-priority-support:
    title: "Use queue.claimWork in scriptworker"
    description: |
        Update scriptworker to use the `queue.claimWork` operation.  This will
        be deployed only after the deployment for
        {docker,generic,taskcluster}-worker is complete, to ensure the queue
        service can handle the load.
    dependencies:
        - docker-generic-taskcluster-worker-priority-support

bbb-priority-support:
    title: "Use queue.claimWork in buildbot-bridge"
    description: |
        Update buildbot-bridge to use the `queue.claimWork` operation.  This will
        be deployed only after the deployment for
        {docker,generic,taskcluster}-worker is complete, to ensure the queue
        service can handle the load.
    dependencies:
        - docker-generic-taskcluster-worker-priority-support

worker-priority-support:
    title: "Support for priorities in TaskCluster workers"
    description: |
        This involves implementing support for the `queue.claimWork` operations
        throughout the queue and workers, then adding new priority levels in queue.
    bug: 1231781
    assigned: jonasfj
    dependencies:
        - bbb-priority-support
        - script-worker-priority-support
        - docker-generic-taskcluster-worker-priority-support

scriptworker-hg-committer:
    title: "Implement a scriptworker script that can safely land commits to hg"

periodic-tasks:
    title: "Implement in-tree support for periodically executing certain tasks"
    bug: 1252948
    description: |
        Lots of tasks need to run periodically, and those tasks and their
        frequency should be controllable in-tree.  This is the `.cron.yml`
        proposal.  This is useful for tasks outside of the migration, too,
        such as valgrind.

periodic-update-service:
    title: "Implement the periodic update service"
    description: |
        We periodically land automatic updates to HSTS, HPKP, and the
        blocklist.  These will use the hg-committer scriptworker to actually
        land the changes, but also need to run periodically, independent of
        regular pushes.
    bug: 1171193
    dependencies:
        - periodic-tasks
        - scriptworker-tier1
        - scriptworker-hg-committer

generic-worker-terminate-on-ami-update:
    # this is necessary for parity with Buildbot, where we can ship environment changes in <96 hours
    title: "Implement the ability for generic-worker instance to terminate themselves when they are idle and running an old workerType definition"
    bug: 1298010
    assigned: pmoore
    done: true

fuzzing:
    title: "Implement fuzzing in taskcluster (TBD)"

taskcluster-worker-setup-cleanup:
    title: "Add support to Taskcluster-Worker for pre-task setup and post-task cleanup work"
    description: |
        For Buildbot jobs, runner takes care of some pre-task setup (warming
        caches, for example, to reduce end-to-end time) and post-task cleanup
        (clearing temporary directories, killing stray processes, etc.).  We
        will need similar functionality with taskcluster-worker, either by
        using runner or implementing it with some other mechanism

taskcluster-worker-cancel-tasks:
    title: "Support for cancelling tasks in taskcluster-worker"

split-python-unit-tests:
    title: "Move Python unit tests currently run in 'make check' into a separate job"
    description: |
        Run those Python unit tests that do not require an objdir in a separate
        task, so that it can execute in parallel with the other test tasks, and
        so that it can succeed for cross-compiled builds.

make-check-ok-for-cross-compile:
    title: "For each make-check check, either split it to a test task, confirm it runs in cross-compilation, or remove"
    bug: 992323
    description: |
        There are a few tests that check properties of binaries, which should
        run ok in cross-compilation.  Everything else must either be moved to a
        test task (so it can run on the target OS) or removed.
    dependencies:
        - split-python-unit-tests
